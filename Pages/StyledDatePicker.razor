@page "/"
@using Blazorise
@using BlazoriseDatePickerWithHolidays.Service
@using static BlazoriseDatePickerWithHolidays.Service.HolidayUtility
@inject IJSRuntime JS

<h3>Custom Date Picker with Highlighted Days</h3>

<p>The highlighted dates selected for this demo are Christian Holidays, marked with a pink background, white foreground and rounded corners. Tooltips are added showing the Holiday name</p>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-3">
        <Addons>
        <Addon AddonType="AddonType.Body">
        <DatePicker TValue="DateTime" 
                    @bind-Date="@selectedDate"
                    @ref="datePicker"
                    InputFormat="dd.MM.yyyy"
                    DisplayFormat="dd.MM.yyyy"
                    DateClass="GetDateClass"
                    ShowClearButton="true"
                    Placeholder="Select a date" />
        </Addon>
        <Addon AddonType="AddonType.End">
            <Button Color="Color.Light" Clicked="@(() => datePicker.ToggleAsync())">
                <Icon Name="IconName.CalendarDay" />
            </Button>
        </Addon>
        </Addons>
        </div>
    </div>
</div>

<p class="mt-3">Selected date <strong>@selectedDate.ToString("dd.MM.yyyy")</strong></p>

@code {
    private DateTime selectedDate = new DateTime(2025, 5, 4);
    private DotNetObjectReference<StyledDatePicker>? _dotNetRef;

    private static int minYear = DateTime.Today.AddYears(-10).Year;

    private static List<AnnotatedDateTime> _holidays = Enumerable.Range(minYear, 20).SelectMany(y => HolidayUtility.GetHolidays(y)).ToList(); // todo - make a service for .NET Wasm app - register into DI container

    private DatePicker<DateTime> datePicker;

    private void OnDateClicked(DateTime date)
    {
        selectedDate = date;
    }

    private async Task OnDateChanged(DateTime date)
    {
        selectedDate = date;
        await ReloadDatesToHighlight();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //TODO : Check if firstRender can be only used here instead
    
        if (!firstRender){
             // Register for month change events
            _dotNetRef = DotNetObjectReference.Create(this);

            await JS.InvokeVoidAsync("registerFlatpickrMonthChange", "input.flatpickr-input", _dotNetRef);

           await ReloadDatesToHighlight();
        }
    }
 
    [JSInvokable]
    public async Task OnMonthChanged()
    {
        await ReloadDatesToHighlight();
    }

    public async ValueTask DisposeAsync(){
        datePicker?.DisposeAsync();
    }

    private async Task ReloadDatesToHighlight(){
         // Format: "Month Day, Year" (e.g., "July 17, 2025")          
            var datesToHighlight = _holidays
                .Select(h => h.Value)
                .Select(d => d.ToString("MMMM dd, yyyy", System.Globalization.CultureInfo.InvariantCulture))
                .ToArray();
            await JS.InvokeVoidAsync("highlightFlatpickrDates", ".flatpickr-calendar", datesToHighlight); 
    }

}
